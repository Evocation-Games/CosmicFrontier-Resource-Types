// Copyright (c) 2023 Evocation Games
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

@project "Cosmic Frontier";
@author "Evocation Games";
@author "Tom Hancocks";
@version "1.0";

@var $StellarType = 0;
@function NextStellarType = $StellarType++;

@function StellarSprite = #StellarType.????.1000 + $1;
@function StellarSpriteImage = #StellarType.????.1000 + $1;
@function StellarLandingImage = #StellarType.????.1000 + $1;

@function DeployWaves = ((($1 * $2) + 100) * 10) + $2;

// Spob resources describe stellar objects, such as planets and space stations.
// (spob stands for space object) Each spob resource represents one stellar
// object, whose name is the name as the name of the resource.

type StellarObject : "sp√∂b" {
    template {
        DWRD X;
        DWRD Y;
        DWRD Type;
        HLNG Flags;
        DWRD Tribute;
        DWRD TechLevel;
        DWRD SpecialTech1;
        DWRD SpecialTech2;
        DWRD SpecialTech3;
        RSRC Government;
        DWRD MinCoolness;
        RSRC CustomLandingPicture;
        RSRC CustomSoundID;
        RSRC DefenseAgentType;
        DWRD DefenseCount;
        HWRD Flags2;
        DWRD AnimationDelay;
        DWRD Frame0Bias;
        RSRC HyperLink1;
        RSRC HyperLink2;
        RSRC HyperLink3;
        RSRC HyperLink4;
        RSRC HyperLink5;
        RSRC HyperLink6;
        RSRC HyperLink7;
        RSRC HyperLink8;
        C0FF OnDominate;
        C0FF OnRelease;
        DLNG Fee;
        DWRD Gravity;
        RSRC Weapon;
        DLNG RelativeStrength;
        DWRD DeadType;
        DWRD DeadTime;
        DWRD ExplosionType;
        C0FF OnDestroy;
        C0FF OnRegen;
        DWRD SpecialTech4;
        DWRD SpecialTech5;
        DWRD SpecialTech6;
        DWRD SpecialTech7;
        DWRD SpecialTech8;
        
        DWRD SizeWidth;
        DWRD SizeHeight;
        
        RSRC Satellite1;
        RSRC Satellite2;
        RSRC Satellite3;
        RSRC Satellite4;
        RSRC Satellite5;
        RSRC Satellite6;
        RSRC Satellite7;
        RSRC Satellite8;
        RSRC Satellite9;
        RSRC Satellite10;
        RSRC Satellite11;
        RSRC Satellite12;
        RSRC Satellite13;
        RSRC Satellite14;
        RSRC Satellite15;
        RSRC Satellite16;
        
        // 8 Shorts Reserved
    };

    // The stellar's X and Y positions in the system (0, 0) is centred.
    // If the StellarObject is a Satellite of another StellarObject, then
    // these act as an angle and a distance from the parent, respectively.
    field("Position") {
        X;
        Y;
    };
    
    field("WorldSize") {
        @api(x) SizeWidth = -1;
        @api(y) SizeHeight = -1;
    };
    
    // Which graphic to use, from 0 to 255.
    field("Type") {
        Type as Range<0, 255>;
    };

    // The next field stores the flag bits that tell Nova what many of the
    // characteristics of the stellar are. Perform an OR operation on the
    // following flags to get the final flag value
    @MergeBitmask field("Flags") {
        Flags as Bitmask = 0 [
            // Can land/dock here
            CanLand = 0x00000001,

            // Has commodity exchange
            HasCommodityExchange = 0x00000002,

            // Can outfit ship here
            HasOutfitter = 0x00000004,

            // Can buy ships here
            HasShipyard = 0x00000008,

            // Stellar is a station instead of a planet
            IsStation = 0x00000010,

            // Stellar is uninhabited (no traffic control or refuelling).
            IsUninhabited = 0x00000020,

            // Has bar
            HasBar = 0x00000040,

            // Can only land here if stellar is destroyed first
            CanOnlyLandIfDestroyed = 0x00000080,

            // Food prices -- if none of these are included, will not trade food
            LowFoodPrices = 0x10000000,
            MedFoodPrices = 0x20000000,
            HighFoodPrices = 0x40000000,

            // Industrial goods prices -- if none included, will not trade
            // industrial goods
            LowIndustrialPrices = 0x01000000,
            MedIndustrialPrices = 0x02000000,
            HighIndustrialPrices = 0x04000000,

            // Medical supplies prices -- if none included, will not trade
            // medical supplies
            LowMedicalPrices = 0x00100000,
            MedMedicalPrices = 0x00200000,
            HighMedicalPrices = 0x00400000,

            // Luxury goods prices -- if none included, will not trade luxury
            // goods
            LowLuxuryPrices = 0x00010000,
            MedLuxuryPrices = 0x00020000,
            HighLuxuryPrices = 0x00040000,

            // Metal prices -- if none included, will not trade metal
            LowMetalPrices = 0x00001000,
            MedMetalPrices = 0x00002000,
            HighMetalPrices = 0x00004000,

            // Equipment prices -- if none included, will not trade equipment
            LowEquipmentPrices = 0x00000100,
            MedEquipmentPrices = 0x00000200,
            HighEquipmentPrices = 0x00000400
        ];
        Flags2 as Bitmask = 0 [
            // For an animated stellar, the first frame will be shown after each
            // subsequent frame.
            InterleaveFirstFrame = 0x0001,

            // For an animated stellar, the next frame in the sequence will be
            // picked at random. The same frame will not be picked twice in a
            // row. Note that this can be combined with the previous flag and the
            // Frame0Bias field to create interesting effects such as random
            // planetary lightning or lights twinkling.
            RandomNextFrame = 0x0002,

            // Play this stellar's sound in a continuous loop.
            LoopSound = 0x0010,

            // Stellar is always dominated (all your base are belong to us).
            AlwaysDominated = 0x0020,

            // Stellar starts the game destroyed.
            StartsDestroyed = 0x0040,

            // For an animated stellar, the stellar's graphic is animated after
            // it's been destroyed and static when it is not destroyed. The
            // normal behaviour is the opposite of this: static when destroyed
            // and animated when not.
            AnimatedWhenDestroyed = 0x0080,

            // Stellar is deadly - all ships that touch it are destroyed
            // immediately.
            IsDeadly = 0x0100,

            // If the stellar has a weapon, it will only fire when provoked (i.e.
            // only when the player is trying to dominate it).
            OnlyFiresWhenProvoked = 0x0200,

            // If the stellar has an outfit shop, it can buy any nonpermanent
            // outfits the player owns, regardless of tech level.
            CanBuyAnyOutfit = 0x0400,

            // Stellar is a hypergate - if the player lands on it he will be
            // given a choice of which other hypergate to travel to (see
            // HyperLink1-8 below).
            IsHypergate = 0x1000,

            // Stellar is a wormhole - if the player lands on it he will be
            // transported to some other random somewhere in the galaxy. If all
            // of the wormhole's HyperLink1-8 fields set to -1, the player will
            // end up at another random wormhole which also has no defined hyper
            // links. If the wormhole has any hyper links defined, the player
            // will end up at one of the wormholes on the other end.
            IsWormhole = 0x2000
        ];
    };

    // The stellar's tribute payout when dominated. -1 or 0 pays 1000 x the
    // tech level per day; a value above zero pays that many credits per day.
    field("Tribute") {
        Tribute = Default [ Default = 0 ];
    };

    // What the base tech level of the stellar is. Only items and ships with
    // TechLevels at or below this value will be available.
    @synthesize field("TechLevel") = 0;

    // Holds the special tech levels of this stellar. Unlike the previous field,
    // only items and ships with exactly this TechLevel will appear here. This is
    // useful for making low-tech worlds that also have a few high-tech items, or
    // for flagging an item with an absurdly high TechLevel (say 15000) and then
    // setting one of the SpecialTech fields of a particular stellar to that same
    // value, thus making that item appear at that stellar and nowhere else.
    field("SpecialTech") repeatable<1, 8> {
        SpecialTech<$FieldNumber> = None [ None = -1 ];
    };

    // What government controls this stellar
    field("Government") {
        @name(governmentReference) Government as Government& = Independent [
            Independent = #-1
        ];
    };

    // The point on your record in the current system that you'll be denied
    // landing clearance on this stellar.
    // -32767: Ignored (player can always land).
    // -1 to -32766: You can be this evil before they shun you.
    // 0 to 32766: They have to like you this much before they let you land.
    // 32767: Player can never land. (Note that this field is ignored if the
    //        stellar is uninhabited).
    field("MinStatus") {
        MinCoolness = Neutral [
            CanAlwaysLand = -32767,
            Neutral = -1,
            CanNeverLand = 32767
        ];
    };

    // The next pair of fields tells Nova which special landscape to show and
    // which ambient sound to play.
    // 128 and up: ID number of PICT to load instead of the standard landscape
    //             display.
    // Less than 128: No custom landscape.
    // Note: for animated hypergates, this field can be optionally used to set
    // the index of the transition between the "opening/closing" animation and
    // the "working" animation. Set to 0 to have the engine use the first half
    // of the frames for "opening/closing" and the second half for "working".
    field("CustomLandingPicture") {
         CustomLandingPicture as & = None [ None = #-1 ];
    };

    // Which ambient sound to play.
    // Note: for hypergates and wormholes, this field serves a different purpose
    // - it controls the angle at which ships emerge. Values between 0 and 359
    //  specify an exact angle, while any other value specifies a random
    // direction.;
    field("CustomSoundID") {
        CustomSoundID as & = None [ None = #-1];
    };

    // Which ship class to use for the defence fleet
    field("DefenseFleet") {
        @api(reference) DefenseAgentType as AgentTypeClassification& = None [ None = #-1];
        
        // The number of ships in the defence fleet. If you set this number to be
        // above 1000, ships will be launched from the planet or station in waves.
        // The last number in this field is the number of ships in each wave, and
        // the first 3-4 numbers (minus 1 from the first digit) are the total
        // number of ships in the planet's fleet. For example, a value of 1082
        // would be four waves of two
        @api(count) DefenseCount = 0;
    };

    // The time to wait between frames, in 30ths of a second.
    @synthesize field("AnimationDelay") = 0;

    // If greater than 1, this is used as a multiplier to extend the display
    // time of the first frame in the sequence. For example, a Frame0Bias of 3
    // would cause the first frame in the sequence would be held for three
    // times longer than the rest of the frames.
    @synthesize field("Frame0Bias") = 0;

    // IDs of the sp√∂b resources of up to eight other hypergates or wormholes
    // to which this hypergate (or wormhole) is connected. Set to zero or -1 if
    // unused. For a wormhole, setting every HyperLink field to -1 will cause the
    // wormhole to randomly connect to any other random wormhole when the player
    // goes through it.
    field("HyperLink") repeatable<1, 8> {
        HyperLink<$FieldNumber> as StellarObject& = None [ None = #-1 ];
    };
    
    field("Satellite") repeatable<1, 16> {
        Satellite<$FieldNumber> as StellarObject& = None [ None = #-1 ];
    };

    // Control bit set expression which is evaluated when the stellar is
    // successfully dominated by the player.
    @synthesize field("OnDominate") = "";

    // Control bit set expression which is evaluated when the stellar is released
    // from domination by the player
    @synthesize field("OnRelease") = "";

    // The fee that is deducted from the player's credits when landing on this
    // stellar. Set to zero if unused.
    @synthesize field("Fee") = 0;

    // The stellar's gravity - 0 for none, positive for stellars that pull,
    // negative for stellars that push. Beware! This feature is mostly here for
    // laughs. It severely confuses the AI, so it should only be used in empty
    // systems where only the player can go.
    field("Gravity") {
        Gravity = None [
            None = 0
        ];
    };

    // Stellars can have a single projectile or missile type weapon, with
    // unlimited ammunition (don't put the ID of a beam or PD weapon here or
    // bad things will happen). Stellars' weapons can be made to fire either
    // only when provoked or any time an enemy ship is present.
    field("Weapon") {
        Weapon as Weapon& = None [ None = #-1 ];
    };

    // The amount of combined mass and energy damage this stellar can take from
    // planetary-type weapons before it is destroyed. Set this to 0 or -1 for an
    // invincible stellar.
    field("RelativeStrength") {
        RelativeStrength = Invincible [ Invincible = -1 ];
    };

    // Which stellar graphic to use when the stellar is destroyed (-1 to display
    // the normal graphic type)
    field("DeadType") {
        DeadType = NormalGraphic [ NormalGraphic = -1 ];
    };

    // The amount of time a stellar remains destroyed before it regenerates
    // itself. Set this to 0 for a stellar that regenerates at the end of every
    // day, or -1 for a stellar that never regenerates on its own.
    field("DeadTime") {
        DeadTime = NeverRegenerates [
            NeverRegenerates = -1,
            RegeneratesDaily = 0
        ];
    };

    // Type of explosion to show (0-63) when the stellar is destroyed. You can
    // also add 1000 to the value of this field in the same  manner as the
    // ExplodeType field in the w√´ap resource. Set to -1 to not show any
    // explosion.
    field("ExplosionType") {
         ExplosionType as Range<-1, 1063> = -1 [
             // -1 No explosion.
             NoExplosion = -1
         ];
     };

    // Control bit set expression which is evaluated when the stellar is
    // destroyed.
    @synthesize field("OnDestroy") = "";

    // Control bit set expression which is evaluated when the stellar
    // automatically regenerates.
    @synthesize field("OnRegen") = "";

};
